-- 1) Criação das tabelas 
drop table clientes;
CREATE TABLE clientes (
    cliente_id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    telefone VARCHAR(20),
    data_cadastro DATE DEFAULT CURRENT_DATE,
    status VARCHAR(10) CHECK (status IN ('Ativo', 'Inativo', 'Bloqueado')) DEFAULT 'Ativo',
    cpf VARCHAR(14) UNIQUE NOT NULL,
    endereco TEXT
);
select * from clientes;
drop table formas_pagamento;
CREATE TABLE formas_pagamento (
    forma_pagamento_id SERIAL PRIMARY KEY,
    descricao VARCHAR(50) NOT NULL UNIQUE,
    parcelas_maximas INT CHECK (parcelas_maximas > 0) DEFAULT 1,
    ativo BOOLEAN DEFAULT TRUE
);
select * from clientes;
drop table produtos;
CREATE TABLE produtos (
    produto_id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    descricao TEXT,
    preco NUMERIC(10,2) CHECK (preco > 0) NOT NULL,
    codigo_barras VARCHAR(20) UNIQUE,
    categoria VARCHAR(50),
    data_cadastro DATE DEFAULT CURRENT_DATE
);
select * from produtos;

drop table estoque;
CREATE TABLE estoque (
    estoque_id SERIAL PRIMARY KEY,
    produto_id INT NOT NULL,
    quantidade INT CHECK (quantidade >= 0) DEFAULT 0,
    localizacao VARCHAR(50),
    data_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (produto_id) REFERENCES produtos(produto_id) ON DELETE CASCADE
);
select * from estoque;

drop table pedidos;
CREATE TABLE pedidos (
    pedido_id SERIAL PRIMARY KEY,
    cliente_id INT NOT NULL,
    data_pedido TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) CHECK (status IN ('Pendente', 'Processando', 'Enviado', 'Entregue', 'Cancelado')) DEFAULT 'Pendente',
    forma_pagamento_id INT,
    valor_total NUMERIC(12,2) CHECK (valor_total >= 0),
    FOREIGN KEY (cliente_id) REFERENCES clientes(cliente_id),
    FOREIGN KEY (forma_pagamento_id) REFERENCES formas_pagamento(forma_pagamento_id)
);
select * from pedidos;

drop table itens_pedido;
CREATE TABLE itens_pedido (
    item_id SERIAL PRIMARY KEY,
    pedido_id INT NOT NULL,
    produto_id INT NOT NULL,
    quantidade INT CHECK (quantidade > 0) NOT NULL,
    preco_unitario NUMERIC(10,2) CHECK (preco_unitario > 0) NOT NULL,
    desconto NUMERIC(10,2) CHECK (desconto >= 0) DEFAULT 0,
    FOREIGN KEY (pedido_id) REFERENCES pedidos(pedido_id) ON DELETE CASCADE,
    FOREIGN KEY (produto_id) REFERENCES produtos(produto_id),
    UNIQUE (pedido_id, produto_id)
);